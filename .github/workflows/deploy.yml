name: üöÄ Deploy peni.sh to Production

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    name: üåç Deploy to Server
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üîê Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H ${{ secrets.HOST }} >> ~/.ssh/known_hosts

      - name: üöÄ Deploy to Server
        run: |
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no ${{ secrets.USERNAME }}@${{ secrets.HOST }} << 'ENDSSH'
            set -e
            
            echo "üöÄ Starting deployment..."
            
            cd /opt/penish-repo || { 
              echo "Creating project directory..."
              sudo mkdir -p /opt/penish-repo
              sudo chown $(whoami):$(whoami) /opt/penish-repo
              cd /opt/penish-repo
            }
            
            if [ ! -d ".git" ]; then
              echo "üîÑ Initial clone..."
              git clone ${{ github.event.repository.clone_url }} .
            else
              echo "üîÑ Pulling latest changes..."
              git fetch --all
              git reset --hard origin/main
            fi
            
            echo "üîß Setting up environment variables..."
            sudo rm -f /opt/penish/.env
            echo "IMAGE_DIR=/var/www/peni.sh/images" | sudo tee /opt/penish/.env >/dev/null
            echo "ENVIRONMENT=production" | sudo tee -a /opt/penish/.env >/dev/null
            echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" | sudo tee -a /opt/penish/.env >/dev/null
            echo "OPENAI_MODEL=gpt-4" | sudo tee -a /opt/penish/.env >/dev/null
            sudo chmod 600 /opt/penish/.env
            sudo chown penish:penish /opt/penish/.env

            echo "üìÅ Copying application files..."
            if [ -f "main.py" ]; then
              sudo cp main.py /opt/penish/
              sudo chown penish:penish /opt/penish/main.py
              echo "‚úÖ Copied main.py"
            fi
            
            if [ -f "requirements.txt" ]; then
              sudo cp requirements.txt /opt/penish/
              echo "‚úÖ Copied requirements.txt"
            fi
            
            if [ -f "nginx.conf" ]; then
              sudo cp nginx.conf /etc/nginx/sites-available/peni.sh
              echo "‚úÖ Copied nginx.conf"
            fi
            
            echo "üêç Installing Python dependencies..."
            sudo -u penish /opt/penish/venv/bin/pip install -r /opt/penish/requirements.txt
            
            echo "üß™ Testing nginx configuration..."
            sudo nginx -t
            
            echo "üîÑ Restarting services..."
            sudo systemctl restart penish
            sudo systemctl reload nginx
            
            echo "‚úÖ Verifying services..."
            sleep 5
            
            if sudo systemctl is-active --quiet penish; then
              echo "‚úÖ penish service is running"
            else
              echo "‚ùå penish service failed to start"
              sudo journalctl -u penish --no-pager -l | tail -5
              exit 1
            fi
            
            if sudo systemctl is-active --quiet nginx; then
              echo "‚úÖ nginx service is running"
            else
              echo "‚ùå nginx service failed to start"  
              sudo journalctl -u nginx --no-pager -l | tail -5
              exit 1
            fi
            
            echo "üéâ Deployment completed successfully!"
          ENDSSH

      - name: üß™ Test Deployment
        run: |
          echo "‚è≥ Waiting for services to fully start..."
          sleep 15

          echo "üîç Testing deployment with multiple methods..."
          SUCCESS=false

          # Try HTTPS first
          echo "Testing HTTPS..."
          if curl -f -s --max-time 10 https://${{ secrets.HOST }}/health | grep -q "healthy"; then
            echo "‚úÖ HTTPS Health check passed!"
            SUCCESS=true
            WORKING_URL="https://${{ secrets.HOST }}"
          else
            echo "‚ö†Ô∏è HTTPS failed, trying HTTP..."
            
            # Try HTTP
            if curl -f -s --max-time 10 http://${{ secrets.HOST }}/health | grep -q "healthy"; then
              echo "‚úÖ HTTP Health check passed!"  
              SUCCESS=true
              WORKING_URL="http://${{ secrets.HOST }}"
            else
              echo "‚ö†Ô∏è HTTP failed, trying direct port..."
              
              # Try direct port 8000
              if curl -f -s --max-time 10 http://${{ secrets.HOST }}:8000/health | grep -q "healthy"; then
                echo "‚úÖ Direct port 8000 health check passed!"
                SUCCESS=true
                WORKING_URL="http://${{ secrets.HOST }}:8000"
              else
                echo "‚ùå All connection methods failed!"
                echo
                echo "Debug information:"
                echo "=================="
                echo "HTTPS response:"
                curl -v --max-time 10 https://${{ secrets.HOST }}/health 2>&1 || echo "No HTTPS response"
                echo
                echo "HTTP response:"
                curl -v --max-time 10 http://${{ secrets.HOST }}/health 2>&1 || echo "No HTTP response"  
                echo
                echo "Direct port response:"
                curl -v --max-time 10 http://${{ secrets.HOST }}:8000/health 2>&1 || echo "No direct port response"
              fi
            fi
          fi

          if [ "$SUCCESS" = true ]; then
            echo
            echo "üîç Testing WiFi API endpoint..."
            if curl -f -s --max-time 10 ${WORKING_URL}/api/wifi | grep -q "ssid"; then
              echo "‚úÖ WiFi API is working!"
              echo "Sample response:"
              curl -s --max-time 10 ${WORKING_URL}/api/wifi | head -3
              echo
              echo "üéâ All tests passed! Deployment successful!"
              echo "üåê Your site is available at: ${WORKING_URL}"
            else
              echo "‚ö†Ô∏è Health check passed but WiFi API failed!"
              echo "This might be an OpenAI API key issue."
              echo "API response:"
              curl -s --max-time 10 ${WORKING_URL}/api/wifi || echo "No API response"
              exit 1
            fi
          else
            echo "‚ùå Health check failed - deployment has issues"
            exit 1
          fi

